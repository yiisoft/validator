# Russian translations for PACKAGE package
# Copyright (C) 2025 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2025-09-02 15:26+0500\n"
"PO-Revision-Date: 2025-04-12 20:36+0500\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Poedit 3.6\n"

#. type: Title ##
#: guide/en/README.md guide/en/using-validator.md
#, no-wrap
msgid "Rules"
msgstr "Правила"

#. type: Title #
#: guide/en/using-validator.md
#, no-wrap
msgid "Using validator"
msgstr "Использование валидатора"

#. type: Plain text
#: guide/en/using-validator.md
msgid "Validator allows to check data in any format. Here are some of the most common use cases."
msgstr "Валидатор позволяет проверить данные в любом формате. Вот некоторые из наиболее распространенных случаев использования."

#. type: Title ##
#: guide/en/using-validator.md
#, no-wrap
msgid "Data"
msgstr "Данные"

#. type: Title ###
#: guide/en/using-validator.md
#, no-wrap
msgid "Single value"
msgstr "Одиночное значение"

#. type: Plain text
#: guide/en/using-validator.md
msgid "In the simplest case, the validator can be used to check a single value:"
msgstr "В простейшем случае, валидатор может использоваться для проверки одиночного значения:"

#. type: Fenced code block (php)
#: guide/en/using-validator.md
#, no-wrap
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Regex;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"$value = 'mrX';\n"
"$rules = [\n"
"    new Length(min: 4, max: 20),\n"
"    new Regex('~^[a-z_\\-]*$~i'),\n"
"];\n"
"$result = (new Validator())->validate($value, $rules);\n"
msgstr ""
"use Yiisoft\\Validator\\Rule\\Length;\r\n"
"use Yiisoft\\Validator\\Rule\\Regex;\r\n"
"use Yiisoft\\Validator\\Validator;\r\n"
"\r\n"
"$value = 'mrX';\r\n"
"$rules = [\r\n"
"    new Length(min: 4, max: 20),\r\n"
"    new Regex('~^[a-z_\\-]*$~i'),\r\n"
"];\r\n"
"$result = (new Validator())->validate($value, $rules);\r\n"

#. type: Plain text
#: guide/en/using-validator.md
#, no-wrap
msgid "> **Note:** Use [Each] rule to validate multiple values of the same type.\n"
msgstr "> **Примечание:** Используйте правило [Each] для валидации нескольких значений одного типа.\n"

#. type: Title ###
#: guide/en/using-validator.md
#, no-wrap
msgid "Array"
msgstr "Массив"

#. type: Plain text
#: guide/en/using-validator.md
msgid "It's possible to validate an array both as a whole and by individual items. For example:"
msgstr "Валидировать массив можно как целиком, так и по отдельным элементам. Например:"

#. type: Fenced code block (php)
#: guide/en/using-validator.md
#, no-wrap
msgid ""
"use Yiisoft\\Validator\\Rule\\FilledAtLeast;\n"
"use Yiisoft\\Validator\\Rule\\Count;\n"
"use Yiisoft\\Validator\\Rule\\Email;\n"
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Rule\\Required;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"$data = [\n"
"    'name' => 'John',\n"
"    'age' => 17,\n"
"    'email' => 'john@example.com',\n"
"    'phone' => null,\n"
"];\n"
"$rules = [\n"
"    // The rules that are not related to a specific property\n"
"\n"
"    // At least one of the properties (\"email\" and \"phone\") must be passed and have non-empty value.  \n"
"    new FilledAtLeast(['email', 'phone']),\n"
"\n"
"    // The rules related to a specific property.\n"
"\n"
"    'name' => [\n"
"        // The name is required (must be passed and have non-empty value).\n"
"        new Required(),\n"
"        // The name's length must be no less than 2 characters.\n"
"        new Length(min: 2),\n"
"    ],  \n"
"    'age' => new Number(min: 21), // The age must be at least 21 years.  \n"
"    'email' => new Email(), // Email must be a valid email address.  \n"
"];\n"
"$result = (new Validator())->validate($data, $rules);\n"
msgstr ""
"use Yiisoft\\Validator\\Rule\\FilledAtLeast;\r\n"
"use Yiisoft\\Validator\\Rule\\Count;\r\n"
"use Yiisoft\\Validator\\Rule\\Email;\r\n"
"use Yiisoft\\Validator\\Rule\\Length;\r\n"
"use Yiisoft\\Validator\\Rule\\Number;\r\n"
"use Yiisoft\\Validator\\Rule\\Required;\r\n"
"use Yiisoft\\Validator\\Validator;\r\n"
"\r\n"
"$data = [\r\n"
"    'name' => 'John',\r\n"
"    'age' => 17,\r\n"
"    'email' => 'john@example.com',\r\n"
"    'phone' => null,\r\n"
"];\r\n"
"$rules = [\r\n"
"    // Правила, не относящиеся к конкретному свойству.\r\n"
"\r\n"
"    // Хотя бы одно из свойств (\"email\" или \"phone\"), должно быть передано и иметь непустое значение.  \r\n"
"    new FilledAtLeast(['email', 'phone']),\r\n"
"\r\n"
"    // Правила, относящиеся к конкретному свойству.\r\n"
"\r\n"
"    'name' => [\r\n"
"        // Свойство \"name\" обязательно (должно быть передано и иметь непустое значение).\r\n"
"        new Required(),\r\n"
"        // Длина \"name\" должна быть не менее 2 символов.\r\n"
"        new Length(min: 2),\r\n"
"    ],  \r\n"
"    'age' => new Number(min: 21), // Возраст должен быть не менее 21 года.  \r\n"
"    'email' => new Email(), // Email должен быть валидным адресом электронной почты.  \r\n"
"];\r\n"
"$result = (new Validator())->validate($data, $rules);\r\n"

#. type: Plain text
#: guide/en/using-validator.md
#, no-wrap
msgid "> **Note:** Use [Nested] rule to validate nested arrays and [Each] rule to validate multiple arrays.\n"
msgstr "> **Примечание:** Используйте правило [Nested] для валидации вложенных массивов и правило [Each] для валидации нескольких массивов.\n"

#. type: Title ###
#: guide/en/using-validator.md
#, no-wrap
msgid "Object"
msgstr "Объект"

#. type: Plain text
#: guide/en/using-validator.md
msgid "Similar to arrays, it's possible to validate an object both as a whole and by individual properties."
msgstr "Подобно массивам, объект можно провалидировать как в целом, так и по отдельным свойствам."

#. type: Plain text
#: guide/en/using-validator.md
msgid "For objects there is an additional option to configure validation with PHP attributes which allows to not pass the rules separately in explicit way (passing just the object itself is enough). For example:"
msgstr "Для объектов есть дополнительная возможность настроить валидацию по атрибутами, что позволяет не передавать правила отдельно явным образом (достаточно передавать только сам объект). Например:"

#. type: Fenced code block (php)
#: guide/en/using-validator.md
#, no-wrap
msgid ""
"use Yiisoft\\Validator\\Rule\\FilledAtLeast;\n"
"use Yiisoft\\Validator\\Rule\\Email;\n"
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Rule\\Required;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"#[FilledAtLeast(['email', 'phone'])]\n"
"final class Person\n"
"{\n"
"    public function __construct(\n"
"        #[Required]\n"
"        #[Length(min: 2)]\n"
"        public readonly ?string $name = null,\n"
"\n"
"        #[Number(min: 21)]\n"
"        public readonly ?int $age = null,\n"
"\n"
"        #[Email]\n"
"        public readonly ?string $email = null,\n"
"\n"
"        public readonly ?string $phone = null,\n"
"    ) {\n"
"    }\n"
"}\n"
"\n"
"$person = new Person(name: 'John', age: 17, email: 'john@example.com', phone: null);\n"
"$result = (new Validator())->validate($person);\n"
msgstr ""
"use Yiisoft\\Validator\\Rule\\FilledAtLeast;\r\n"
"use Yiisoft\\Validator\\Rule\\Email;\r\n"
"use Yiisoft\\Validator\\Rule\\Length;\r\n"
"use Yiisoft\\Validator\\Rule\\Number;\r\n"
"use Yiisoft\\Validator\\Rule\\Required;\r\n"
"use Yiisoft\\Validator\\Validator;\r\n"
"\r\n"
"#[FilledAtLeast(['email', 'phone'])]\r\n"
"final class Person\r\n"
"{\r\n"
"    public function __construct(\r\n"
"        #[Required]\r\n"
"        #[Length(min: 2)]\r\n"
"        public readonly ?string $name = null,\r\n"
"\r\n"
"        #[Number(min: 21)]\r\n"
"        public readonly ?int $age = null,\r\n"
"\r\n"
"        #[Email]\r\n"
"        public readonly ?string $email = null,\r\n"
"\r\n"
"        public readonly ?string $phone = null,\r\n"
"    ) {\r\n"
"    }\r\n"
"}\r\n"
"\r\n"
"$person = new Person(name: 'John', age: 17, email: 'john@example.com', phone: null);\r\n"
"$result = (new Validator())->validate($person);\r\n"

#. type: Plain text
#: guide/en/using-validator.md
#, no-wrap
msgid "> **Note:** [readonly properties] are supported only starting from PHP 8.1.\n"
msgstr "> **Примечание:** [readonly-свойства] поддерживаются только начиная с версии PHP 8.1.\n"

#. type: Plain text
#: guide/en/using-validator.md
#, no-wrap
msgid "> **Note:** Use [Nested] rule to validate related objects and [Each] rule to validate multiple objects.\n"
msgstr "> **Примечание:** Используйте правило [Nested] для валидации связанных объектов и правило [Each] для валидации нескольких объектов.\n"

#. type: Title ###
#: guide/en/using-validator.md
#, no-wrap
msgid "Custom data set"
msgstr "Пользовательский набор данных"

#. type: Plain text
#: guide/en/using-validator.md
msgid "Most of the time creating a custom data set is not needed because of built-in data sets and automatic normalization of all types during validation. However, this can be useful, for example, to change a default value for certain properties:"
msgstr ""
"В большинстве случаев создание собственного набора данных не требуется из-за наличия встроенных и автоматической нормализации всех типов во время валидации.\n"
"Однако, это может оказаться полезным, например, для изменения значения по-умолчанию для определенных свойств:"

#. type: Fenced code block (php)
#: guide/en/using-validator.md
#, no-wrap
msgid ""
"use Yiisoft\\Validator\\DataSetInterface;\n"
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"final class MyArrayDataSet implements DataSetInterface\n"
"{\n"
"    public function __construct(private array $data = [],) \n"
"    {\n"
"    }\n"
"\n"
"    public function getPropertyValue(string $property): mixed\n"
"    {\n"
"        if ($this->hasProperty($property)) {\n"
"            return $this->data[$property];\n"
"        }\n"
"\n"
"        return $property === 'name' ? '' : null;\n"
"    }\n"
"\n"
"    public function getData(): array\n"
"    {\n"
"        return $this->data;\n"
"    }\n"
"\n"
"    public function hasProperty(string $property): bool\n"
"    {\n"
"        return array_key_exists($property, $this->data);\n"
"    }\n"
"}\n"
"\n"
"$data = new MyArrayDataSet([]);\n"
"$rules = ['name' => new Length(min: 2), 'age' => new Number(min: 21)];\n"
"$result = (new Validator())->validate($data, $rules);\n"
msgstr ""
"use Yiisoft\\Validator\\DataSetInterface;\n"
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"final class MyArrayDataSet implements DataSetInterface\n"
"{\n"
"    public function __construct(private array $data = [],) \n"
"    {\n"
"    }\n"
"\n"
"    public function getPropertyValue(string $property): mixed\n"
"    {\n"
"        if ($this->hasProperty($property)) {\n"
"            return $this->data[$property];\n"
"        }\n"
"\n"
"        return $property === 'name' ? '' : null;\n"
"    }\n"
"\n"
"    public function getData(): array\n"
"    {\n"
"        return $this->data;\n"
"    }\n"
"\n"
"    public function hasProperty(string $property): bool\n"
"    {\n"
"        return array_key_exists($property, $this->data);\n"
"    }\n"
"}\n"
"\n"
"$data = new MyArrayDataSet([]);\n"
"$rules = ['name' => new Length(min: 2), 'age' => new Number(min: 21)];\n"
"$result = (new Validator())->validate($data, $rules);\n"

#. type: Title ###
#: guide/en/using-validator.md
#, no-wrap
msgid "Passing single rule"
msgstr "Передача одиночного значения"

#. type: Plain text
#: guide/en/using-validator.md
msgid "For a single rule, there is an option to omit the array:"
msgstr "Для одиночного правила есть возможность опустить массив:"

#. type: Fenced code block (php)
#: guide/en/using-validator.md
#, no-wrap
msgid ""
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"$value = 7;\n"
"$rule = new Number(min: 42);\n"
"$result = (new Validator())->validate($value, $rule);\n"
msgstr ""
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"$value = 7;\n"
"$rule = new Number(min: 42);\n"
"$result = (new Validator())->validate($value, $rule);\n"

#. type: Title ###
#: guide/en/using-validator.md
#, no-wrap
msgid "Providing rules via dedicated object"
msgstr "Передача правил посредством выделенного объекта"

#. type: Plain text
#: guide/en/using-validator.md
msgid "Could help reuse the same set of rules across different places. Two ways are possible - using PHP attributes and specifying explicitly via interface method implementation."
msgstr "Может помочь повторно использовать один и тот же набор правил в разных местах. Возможны два способа: использование атрибутов и явное указание через реализацию метода интерфейса."

#. type: Title ###
#: guide/en/using-validator.md guide/en/built-in-rules-nested.md
#, no-wrap
msgid "Using PHP attributes"
msgstr "Использование атрибутов"

#. type: Plain text
#: guide/en/using-validator.md
msgid "In this case, the rules will be automatically parsed, no need to additionally do anything."
msgstr "В этом случае правила будут парситься автоматически, дополнительно ничего делать не нужно."

#. type: Fenced code block (php)
#: guide/en/using-validator.md
#, no-wrap
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"final class PersonRulesProvider\n"
"{\n"
"    #[Length(min: 2)]\n"
"    public string $name;\n"
"\n"
"    #[Number(min: 21)]\n"
"    protected int $age;\n"
"}\n"
"\n"
"$data = ['name' => 'John', 'age' => 18];\n"
"$rulesProvider = new PersonRulesProvider();\n"
"$result = (new Validator())->validate($data, $rulesProvider);\n"
msgstr ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"final class PersonRulesProvider\n"
"{\n"
"    #[Length(min: 2)]\n"
"    public string $name;\n"
"\n"
"    #[Number(min: 21)]\n"
"    protected int $age;\n"
"}\n"
"\n"
"$data = ['name' => 'John', 'age' => 18];\n"
"$rulesProvider = new PersonRulesProvider();\n"
"$result = (new Validator())->validate($data, $rulesProvider);\n"

#. type: Title ####
#: guide/en/using-validator.md
#, no-wrap
msgid "Using interface method implementation"
msgstr "Использование реализации метода интерфейса"

#. type: Plain text
#: guide/en/using-validator.md
msgid "Providing rules via interface method implementation has priority over PHP attributes. So, in case both are present, the attributes will be ignored without causing an exception."
msgstr "Передача правил через реализацию метода интерфейса имеет приоритет над атрибутами. Поэтому в случае одновременного использования, атрибуты будут игнорироваться без выбрасывания исключения."

#. type: Fenced code block (php)
#: guide/en/using-validator.md
#, no-wrap
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\RulesProviderInterface;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"final class PersonRulesProvider implements RulesProviderInterface\n"
"{\n"
"    #[Length(min: 2)] // Will be silently ignored.\n"
"    public string $name;\n"
"\n"
"    #[Number(min: 21)] // Will be silently ignored.\n"
"    protected int $age;\n"
"    \n"
"    public function getRules() : iterable\n"
"    {\n"
"        return ['name' => new Length(min: 2), 'age' => new Number(min: 21)];\n"
"    }\n"
"}\n"
"\n"
"$data = ['name' => 'John', 'age' => 18];\n"
"$rulesProvider = new PersonRulesProvider();\n"
"$result = (new Validator())->validate($data, $rulesProvider);\n"
msgstr ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\RulesProviderInterface;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"final class PersonRulesProvider implements RulesProviderInterface\n"
"{\n"
"    #[Length(min: 2)] // Будет тихо проигнорировано.\n"
"    public string $name;\n"
"\n"
"    #[Number(min: 21)] // Будет тихо проигнорировано.\n"
"    protected int $age;\n"
"    \n"
"    public function getRules() : iterable\n"
"    {\n"
"        return ['name' => new Length(min: 2), 'age' => new Number(min: 21)];\n"
"    }\n"
"}\n"
"\n"
"$data = ['name' => 'John', 'age' => 18];\n"
"$rulesProvider = new PersonRulesProvider();\n"
"$result = (new Validator())->validate($data, $rulesProvider);\n"

#. type: Title ###
#: guide/en/using-validator.md
#, no-wrap
msgid "Providing rules via the data object"
msgstr "Передача правил через объект данных"

#. type: Plain text
#: guide/en/using-validator.md
msgid "In this way, rules are provided in addition to data in the same object. Only interface method implementation is supported. Note that the `rules` argument is `null` in the `validate()` method call."
msgstr ""
"В этом случае правила передаются в дополнение к данным в одном и том же объекте.\n"
"Поддерживается только реализация метода интерфейса. Обратите внимание, что аргумент `rules` имеет значение `null` при вызове метода `validate()`."

#. type: Fenced code block (php)
#: guide/en/using-validator.md
#, no-wrap
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\RulesProviderInterface;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"final class Person implements RulesProviderInterface\n"
"{\n"
"    #[Length(min: 2)] // Not supported for using with data objects. Will be silently ignored.\n"
"    public string $name;\n"
"\n"
"    #[Number(min: 21)] // Not supported for using with data objects. Will be silently ignored.\n"
"    protected int $age;\n"
"    \n"
"    public function getRules(): iterable\n"
"    {\n"
"        return ['name' => new Length(min: 2), 'age' => new Number(min: 21)];\n"
"    }\n"
"}\n"
"\n"
"$data = new Person(name: 'John', age: 18);\n"
"$result = (new Validator())->validate($data);\n"
msgstr ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\RulesProviderInterface;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"final class Person implements RulesProviderInterface\n"
"{\n"
"    #[Length(min: 2)] // Не поддерживается для использования с объектами данных. Будет тихо проигнорировано.\n"
"    public string $name;\n"
"\n"
"    #[Number(min: 21)] // Не поддерживается для использования с объектами данных. Будет тихо проигнорировано.\n"
"    protected int $age;\n"
"    \n"
"    public function getRules(): iterable\n"
"    {\n"
"        return ['name' => new Length(min: 2), 'age' => new Number(min: 21)];\n"
"    }\n"
"}\n"
"\n"
"$data = new Person(name: 'John', age: 18);\n"
"$result = (new Validator())->validate($data);\n"

#. type: Link reference
#: guide/en/using-validator.md
#, no-wrap
msgid "[Each]: built-in-rules-each.md"
msgstr "[Each]: built-in-rules-each.md"

#. type: Link reference
#: guide/en/using-validator.md
#, no-wrap
msgid "[Nested]: built-in-rules-nested.md"
msgstr "[Nested]: built-in-rules-nested.md"

#. type: Link reference
#: guide/en/using-validator.md
#, no-wrap
msgid "[readonly properties]: https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-properties"
msgstr "[readonly-свойства]: https://www.php.net/manual/ru/language.oop5.properties.php#language.oop5.properties.readonly-properties"
