# Russian translations for PACKAGE package
# Copyright (C) 2025 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2025-06-28 13:58+0000\n"
"PO-Revision-Date: 2025-06-28 19:18+0500\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Poedit 3.6\n"

#. type: Title #
#: guide/en/built-in-rules-compare.md
#, no-wrap
msgid "`Compare` - comparing validated value with target value"
msgstr "`Compare` - сравнение валидируемого значения с целевым"

#. type: Title ##
#: guide/en/built-in-rules-compare.md
#, no-wrap
msgid "Using with `DateTime` objects"
msgstr "Использование с объектом `DateTime`"

#. type: Title ###
#: guide/en/built-in-rules-compare.md
#, no-wrap
msgid "Basic usage"
msgstr "Базовое иcпользование"

#. type: Fenced code block (php)
#: guide/en/built-in-rules-compare.md
#, no-wrap
msgid ""
"use DateTime;\n"
"use Yiisoft\\Validator\\Rule\\CompareType;\n"
"use Yiisoft\\Validator\\Rule\\GreaterThanOrEqual;\n"
"\n"
"$rules = [\n"
"    'date_of_birth' => new GreaterThanOrEqual(new DateTime('1900-01-01'), type: CompareType::ORIGINAL),\n"
"];\n"
msgstr ""
"use DateTime;\n"
"use Yiisoft\\Validator\\Rule\\CompareType;\n"
"use Yiisoft\\Validator\\Rule\\GreaterThanOrEqual;\n"
"\n"
"$rules = [\n"
"    'date_of_birth' => new GreaterThanOrEqual(new DateTime('1900-01-01'), type: CompareType::ORIGINAL),\n"
"];\n"

#. type: Title ###
#: guide/en/built-in-rules-compare.md
#, no-wrap
msgid "Dynamic range"
msgstr "Динамический диапазон"

#. type: Fenced code block (php)
#: guide/en/built-in-rules-compare.md
#, no-wrap
msgid ""
"use DateTime;\n"
"use Yiisoft\\Validator\\Rule\\Callback;\n"
"use Yiisoft\\Validator\\Rule\\CompareType;\n"
"use Yiisoft\\Validator\\Rule\\GreaterThanOrEqual;\n"
"use Yiisoft\\Validator\\Rule\\LessThanOrEqual;\n"
"\n"
"$rules = [\n"
"    'shipping_datetime' => [\n"
"        new GreaterThan(\n"
"            (new DateTime('now'))\n"
"                ->add(DateInterval::createFromDateString('1 day')),\n"
"            type: CompareType::ORIGINAL,\n"
"        ),\n"
"        new LessThan(\n"
"            (new DateTime('now'))\n"
"                ->add(DateInterval::createFromDateString('1 week')),\n"
"            type: CompareType::ORIGINAL,\n"
"        ),        \n"
"    ],\n"
"];\n"
msgstr ""
"use DateTime;\n"
"use Yiisoft\\Validator\\Rule\\Callback;\n"
"use Yiisoft\\Validator\\Rule\\CompareType;\n"
"use Yiisoft\\Validator\\Rule\\GreaterThanOrEqual;\n"
"use Yiisoft\\Validator\\Rule\\LessThanOrEqual;\n"
"\n"
"$rules = [\n"
"    'shipping_datetime' => [\n"
"        new GreaterThan(\n"
"            (new DateTime('now'))\n"
"                ->add(DateInterval::createFromDateString('1 day')),\n"
"            type: CompareType::ORIGINAL,\n"
"        ),\n"
"        new LessThan(\n"
"            (new DateTime('now'))\n"
"                ->add(DateInterval::createFromDateString('1 week')),\n"
"            type: CompareType::ORIGINAL,\n"
"        ),        \n"
"    ],\n"
"];\n"
